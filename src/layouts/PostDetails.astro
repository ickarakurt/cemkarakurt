---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import Comments from "@components/Comments";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  ogType: "article",
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, slug }) => ({
  slug,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.slug);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex items-center gap-1 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors duration-200"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
        <path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg>
      <span class="text-sm font-medium">Go back</span>
    </button>
  </div>

  <main id="main-content">
    {/* Title and Meta Section */}
    <div class="mb-8">
      <h1
        transition:name={slugifyStr(title)}
        class="mb-3 text-3xl font-bold text-gray-900 dark:text-gray-100"
      >
        {title}
      </h1>
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        size="lg"
        className="text-sm text-gray-600 dark:text-gray-400"
      />
    </div>

    {/* Article Content */}
    <article
      id="article"
      class="prose prose-gray dark:prose-invert mx-auto max-w-3xl
        prose-headings:scroll-mt-20 prose-headings:font-semibold
        prose-a:text-skin-accent prose-a:decoration-dashed prose-a:underline-offset-4
        prose-img:rounded-lg prose-img:shadow-md
        prose-pre:border prose-pre:border-gray-200 dark:prose-pre:border-gray-800"
    >
      <Content />
    </article>

    {/* Tags Section */}
    <div class="mt-12 mb-8">
      <ul class="flex flex-wrap gap-2">
        {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
      </ul>
    </div>

    {/* Bottom Navigation */}
    <div class="space-y-8">
      <div
        class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
      >
        <button
          id="back-to-top"
          class="flex items-center gap-1 rounded-md px-3 py-1.5 text-sm font-medium
            text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100
            transition-colors duration-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 rotate-90">
            <path
              d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
            ></path>
          </svg>
          <span>Back to Top</span>
        </button>
        <ShareLinks />
      </div>

      <hr class="border-gray-200 dark:border-gray-800" />

      {/* Previous/Next Posts */}
      <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
        {
          prevPost && (
            <a
              href={`/blog/${prevPost.slug}/`}
              title={prevPost.title}
              class="group flex items-center gap-2 rounded-lg border border-gray-200 p-4 dark:border-gray-800 hover:border-gray-300 dark:hover:border-gray-700 transition-colors duration-200"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 flex-none text-gray-400 group-hover:text-gray-900 dark:group-hover:text-gray-100 transition-colors duration-200"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M15 6l-6 6l6 6" />
              </svg>
              <div class="flex-1 text-sm">
                <div class="text-gray-600 dark:text-gray-400 font-medium mb-0.5">
                  Previous Post
                </div>
                <div class="text-gray-900 dark:text-gray-100 font-semibold line-clamp-1">
                  {prevPost.title}
                </div>
              </div>
            </a>
          )
        }

        {
          nextPost && (
            <a
              href={`/blog/${nextPost.slug}/`}
              title={nextPost.title}
              class="group flex items-center gap-2 rounded-lg border border-gray-200 p-4 dark:border-gray-800 hover:border-gray-300 dark:hover:border-gray-700 transition-colors duration-200 sm:col-start-2"
            >
              <div class="flex-1 text-right text-sm">
                <div class="text-gray-600 dark:text-gray-400 font-medium mb-0.5">
                  Next Post
                </div>
                <div class="text-gray-900 dark:text-gray-100 font-semibold line-clamp-1">
                  {nextPost.title}
                </div>
              </div>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 flex-none text-gray-400 group-hover:text-gray-900 dark:group-hover:text-gray-100 transition-colors duration-200"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M9 6l6 6l-6 6" />
              </svg>
            </a>
          )
        }
      </div>

      {/* Comments Section */}
      <div class="mt-8">
        <Comments client:only="react" />
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
</style>

<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
